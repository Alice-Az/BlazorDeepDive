@page "/servers"
@page "/servers/back_from/{cityName}"
@using ServerManagement.StateStore

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore
@inject MontrealOnlineServersStore MontrealOnlineServersStore
@inject OttawaOnlineServersStore OttawaOnlineServersStore
@inject CalgaryOnlineServersStore CalgaryOnlineServersStore
@inject HalifaxOnlineServersStore HalifaxOnlineServersStore

<h3>Servers</h3>
<br />
<br />

<CityListComponent 
    @ref="cityListComponent" 
    SelectedCity="@selectedCity"
    SelectCityCallback="HandleCitySelection"></CityListComponent>

<br />

<ServerSearchComponent 
    @ref="serverSearchComponent" 
    HandleSearchCallback="HandleSearch">
</ServerSearchComponent>

<br />

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent @rendermode="InteractiveServer"
                         CityName="@selectedCity"
                         ServerFilter="@serverFilter">
    </ServerListComponent>
</CascadingValue>

<br />
<br />

<a href="/server" class="btn btn-primary">Add server</a>

@code {
    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string serverFilter = "";

    private CityListComponent? cityListComponent;
    private ServerSearchComponent? serverSearchComponent;

    private void HandleSearch(string searchFilter)
    {
        serverFilter = searchFilter;
        cityListComponent?.ClearSelection();
    }

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;

        serverFilter = string.Empty;
        serverSearchComponent?.ClearFilter();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }

            var serversToronto = ServersRepository.GetServersByCity("Toronto");
            if (serversToronto is not null)
            {
                TorontoOnlineServersStore.SetNumServersOnline(serversToronto.Count(x => x.IsOnline));
            }

            var serversMontreal = ServersRepository.GetServersByCity("Montreal");
            if (serversMontreal is not null)
            {
                MontrealOnlineServersStore.SetNumServersOnline(serversMontreal.Count(x => x.IsOnline));
            }

            var serversOttawa = ServersRepository.GetServersByCity("Ottawa");
            if (serversOttawa is not null)
            {
                OttawaOnlineServersStore.SetNumServersOnline(serversOttawa.Count(x => x.IsOnline));
            }

            var serversCalgary = ServersRepository.GetServersByCity("Calgary");
            if (serversCalgary is not null)
            {
                CalgaryOnlineServersStore.SetNumServersOnline(serversCalgary.Count(x => x.IsOnline));
            }

            var serversHalifax = ServersRepository.GetServersByCity("Halifax");
            if (serversToronto is not null)
            {
                HalifaxOnlineServersStore.SetNumServersOnline(serversHalifax.Count(x => x.IsOnline));
            }
        }
    }
}
